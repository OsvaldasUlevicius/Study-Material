@keyframes moveInLeft {
  /* 0% before the animation starts
    100% when the animation finishes */
  0% {
    opacity: 0;
    /* invisible */
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem);
    /* goes 20px to the right of the final position */ }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInUp {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  font-size: 62.5%; }

body {
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  /* should always do this if we want to give paddings/heights widths to elements */
  /* inline block is treated as text so its enough to say text-align:center; in the container */
  border-radius: 10rem;
  transition: all .2s;
  position: relative;
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /* adds 0 shadow in the x axis and 5px shadow to the y axis and 10px blur and rgba color of the shadow with opacity*/ }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    /* increases the element */
    opacity: 0; }

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn::after {
  content: "";
  /* content and display here are always necessary */
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  /* defines the position of elements if they are on top of one another */
  transition: all .4s; }

.btn--animated {
  animation: moveInUp .5s ease-out .75s;
  /* the last point is animation delay */
  animation-fill-mode: backwards;
  /* automatically applies the animation styles (opacity and transform) to the element before the animation starts */ }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative; }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; }

.row {
  max-width: 114rem;
  background-color: #eee;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2);
    background-color: orangered; }
  .row .col-1-of-3 {
    width: calc((100% - 6rem * 2) / 3);
    background-color: green; }
  .row .col-2-of-3 {
    width: calc((100% - 6rem * 2) / 3 * 2 + 6rem);
    background-color: yellow; }
  .row .col-1-of-4 {
    width: calc((100% - 6rem * 3) / 4);
    background-color: blue; }
  .row .col-2-of-4 {
    width: calc((100% - 6rem * 3) / 4 * 2 + 6rem);
    background-color: orange; }
  .row .col-3-of-4 {
    width: calc((100% - 6rem * 3) / 4 * 3 + 6rem * 2);
    background-color: gray; }
