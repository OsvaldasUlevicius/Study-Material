What I learned:

1. Instead of normalize.css now I can use simple reset (margin:0;padding:0;box-sizing: border-box) to make sure that the website looks nice across different browsers.
2. box-sizing: border-box; - changes the box model so that the borders and the paddings are no longer added to the total width/height of the box.
3. vh (f.x., 95vh) - sets it that at any size of the screen the height/widht of an element should be 95% of the viewport.
4. linear-gradient.
5. background-size: cover; - tries to fit the element (img) inside of a box (container of the size 95vh).
6. background-position: top; - ensures that not depending on the screen size, the top of the image stays at the top of the container.
7. clip-path: polygon(x y, x y, x y, x y) - defines the form of the container. https://bennettfeely.com/clippy/ 



8. Postioning elements in containers: set the container position: relative; then set the element position:absolute; and specify top:y px; and left:x px;.
9. Centering element in containers: set the elements position:absolute; define top:50%; and left:50%; and then use tranform: translate(-50%; -50%).
  Absolute and top/left properties set that the elements position will begin at those marks(50% and 50%) and the transform:translate property will shifts the elements center to 
  those marks.
10. display: block; - block elements occupy the entire width that they have available and create line breaks after and before them.



11. Creating custom CSS animations using @keyframes
  Best to use with opacity and transfer (the browsers handle these properties the best)
12. Using animation properties (animation-name:; animation-duration:;animation-timing-function:;animation-delay:;animation-iteration-count:;)
  animation-timing-function:; - defines how fast or slow will the animations happen (at the start/end).
  animation-iteration-count:; - how many times will the animation happen - repeat.\
13. backface-visibility: hidden; - removes the unwanted "shaking" effect from the animation.


14. should always give the property display:inline-block; to elements if we give them paddings/heights/widths, so that they don't cover over other elements
  inline-block is treated as a text so I can apply text-align:center; property to it.
15. box-shadow: x y blur color;

16. ::after selector;
17. z-index:; - defines the position of elements if they are on top of one another.
18. transform: scale(); - increases the element.
19. animation-fill-mode: backwards; - automatically applies the animation styles to the element before the animation starts */


20. Adding html tag to the CSS file and defining font-size in %.
21. Converting all the px units to rem (relative to 62.5% of the default (16px)). Makes it easier to make the website responsive.
22. inherit keyword - made box-sizing be inheritable. Not all properties are inheritable. Properties related to font are inheritabl.e
23. Rems and ems.


24. Box types:
  display:block; - will always occupy as much space as possible (100% of its parent's width) and create line breaks after and before it 
                  (meaning that the blocks are formated verticaly one after another(), box-model applies to them (margin/padding...etc.)
  display: inline; - content is dirtributed in lines, occupies the space that its content actually needs (and no more), 
                  no line-breaks, the height and with properties do not apply and we can only specify horizontal paddings and margins only
  display: inline-block; - occupies the space that its content actually needs (and no more), no line-breaks, box-model applies to them (margin/padding...etc.)

25. Positioning schemes:
  position: relative; - normal flow - default positioning shceme, not floated, not absolutely positioned, elements laid out according to their source order
  float: left; / float: right; - element is removed from the normal flow and is shifted to the left or right as much as possible,
                          text and inline elements will wrap around the floated element, the container will not adjust its height to the element (we use clearfix to fix that)
  position: absolute; position: fixed; - absolute positioning - element is removed from the normal flow the element has no impact on surrounding content
                                or elements (we can even overlap them)/ we use top/bottom/left/right to offset the element from its relatively positioned container

26. Stacking contexts: z-index: x; the higher z index appears higher on the top;


Sass:
27. Variables ($color-primary: #fff; $color-primary
28. Nesting and "&" with pseudo-classes
29. Functions: darken(); lighten();
30. Mixins - a reusable part of code
31. Mixins with arguments
32. Extends - like decorators
33. Sass functions

NPM Packages:
34. npm init - to create package.json file
35. npm install node-sass --save-dev

36. npm run compile:sass - runs the script in the package.json file ("compile:sass": "node-sass sass/main.scss css/style2.css -w") - converts the main.scss file into
css file that the .html file links to. -w makes it so as long as this command is run, the conversion will happen automaticaly with each save of the scss file.
